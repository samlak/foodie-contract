{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "chefId",
          "type": "bytes32"
        }
      ],
      "name": "ChefBooked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "addChef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_chefId",
          "type": "bytes32"
        }
      ],
      "name": "bookChef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bookings",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "chefs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chefsList",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_chefId",
          "type": "bytes32"
        }
      ],
      "name": "getChef",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x03c0aca653e8f632a9dd3a21dd3d3fd7feec9cd796f3dd195ffb9ccba701079d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "1007463",
    "logsBloom": "0x
    "blockHash": "0xfd16c97dc4b04959fd8aa4e345fd55773256d2c65fc751d5af576d552d341356",
    "transactionHash": "0x03c0aca653e8f632a9dd3a21dd3d3fd7feec9cd796f3dd195ffb9ccba701079d",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "1007463",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "35e1ae58bc651a11e7dfeb063dfcd4bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"chefId\",\"type\":\"bytes32\"}],\"name\":\"ChefBooked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"addChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chefId\",\"type\":\"bytes32\"}],\"name\":\"bookChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bookings\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"chefs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chefsList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chefId\",\"type\":\"bytes32\"}],\"name\":\"getChef\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FoodieBooking.sol\":\"FoodieBooking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/FoodieBooking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract FoodieBooking {\\n    ERC20 public token;\\n\\n    struct Chef {\\n        bytes32 id;\\n        string name;\\n        address wallet;\\n        uint256 fee;\\n    }\\n    uint256 private chefCounter;\\n    mapping(bytes32 => Chef) public chefs;\\n    bytes32[] public chefsList;\\n\\n    event ChefBooked(address indexed user, bytes32 chefId);\\n\\n    mapping(address => bytes32) public bookings;\\n\\n    constructor(address _token) {\\n        token = ERC20(_token);\\n    }\\n\\n    function bookChef(bytes32 _chefId) public {\\n        Chef memory chef = chefs[_chefId];\\n        if (token.balanceOf(msg.sender) < chef.fee) {\\n            revert(\\\"Insufficient Token\\\");\\n        }\\n        token.transfer(chef.wallet, chef.fee);\\n        bookings[msg.sender] = _chefId;\\n        emit ChefBooked(msg.sender, _chefId);\\n    }\\n\\n    function addChef(\\n        string memory _name,\\n        address _wallet,\\n        uint256 _fee\\n    ) public {\\n        chefCounter = chefCounter + 1;\\n        bytes32 chefId = keccak256(abi.encodePacked(chefCounter, _name));\\n        chefs[chefId] = Chef(chefId, _name, _wallet, _fee);\\n    }\\n\\n    function getChef(bytes32 _chefId)\\n        public\\n        view\\n        returns (\\n            bytes32,\\n            string memory,\\n            address,\\n            uint256\\n        )\\n    {\\n        Chef memory chef = chefs[_chefId];\\n        return (chef.id, chef.name, chef.wallet, chef.fee);\\n    }\\n}\\n\",\"keccak256\":\"0x00dc26aab534675c265fd92f16534022ce83564525faef7516b3c090acdb152d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620011fb380380620011fb8339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b6110d1806200012a6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637cf2beab1161005b5780637cf2beab14610104578063a0a934ff14610120578063c0299c1714610150578063fc0c546a146101805761007d565b80630f4b16c71461008257806312514f83146100b557806347505917146100e8575b600080fd5b61009c60048036038101906100979190610973565b61019e565b6040516100ac9493929190610aa2565b60405180910390f35b6100cf60048036038101906100ca9190610973565b610276565b6040516100df9493929190610aa2565b60405180910390f35b61010260048036038101906100fd9190610c7b565b6103bf565b005b61011e60048036038101906101199190610973565b6104cd565b005b61013a60048036038101906101359190610cea565b610826565b6040516101479190610d17565b60405180910390f35b61016a60048036038101906101659190610d32565b61083e565b6040516101779190610d17565b60405180910390f35b610188610862565b6040516101959190610dbe565b60405180910390f35b60026020528060005260406000206000915090508060000154908060010180546101c790610e08565b80601f01602080910402602001604051908101604052809291908181526020018280546101f390610e08565b80156102405780601f1061021557610100808354040283529160200191610240565b820191906000526020600020905b81548152906001019060200180831161022357829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154905084565b60006060600080600060026000878152602001908152602001600020604051806080016040529081600082015481526020016001820180546102b790610e08565b80601f01602080910402602001604051908101604052809291908181526020018280546102e390610e08565b80156103305780601f1061030557610100808354040283529160200191610330565b820191906000526020600020905b81548152906001019060200180831161031357829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481525050905080600001518160200151826040015183606001519450945094509450509193509193565b600180546103cd9190610e69565b6001819055506000600154846040516020016103ea929190610f1c565b60405160208183030381529060405280519060200120905060405180608001604052808281526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381525060026000838152602001908152602001600020600082015181600001556020820151816001019080519060200190610472929190610886565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015590505050505050565b6000600260008381526020019081526020016000206040518060800160405290816000820154815260200160018201805461050790610e08565b80601f016020809104026020016040519081016040528092919081815260200182805461053390610e08565b80156105805780601f1061055557610100808354040283529160200191610580565b820191906000526020600020905b81548152906001019060200180831161056357829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050806060015160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106499190610f44565b60206040518083038186803b15801561066157600080fd5b505afa158015610675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106999190610f74565b10156106da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d190610fed565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826040015183606001516040518363ffffffff1660e01b815260040161073d92919061100d565b602060405180830381600087803b15801561075757600080fd5b505af115801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f919061106e565b5081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167ffe6400498b4af70e0ceab7d6f4d52b731d43bfac6a0a14a50e868cb782c79f828360405161081a9190610d17565b60405180910390a25050565b60046020528060005260406000206000915090505481565b6003818154811061084e57600080fd5b906000526020600020016000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b82805461089290610e08565b90600052602060002090601f0160209004810192826108b457600085556108fb565b82601f106108cd57805160ff19168380011785556108fb565b828001600101855582156108fb579182015b828111156108fa5782518255916020019190600101906108df565b5b509050610908919061090c565b5090565b5b8082111561092557600081600090555060010161090d565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6109508161093d565b811461095b57600080fd5b50565b60008135905061096d81610947565b92915050565b60006020828403121561098957610988610933565b5b60006109978482850161095e565b91505092915050565b6109a98161093d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109e95780820151818401526020810190506109ce565b838111156109f8576000848401525b50505050565b6000601f19601f8301169050919050565b6000610a1a826109af565b610a2481856109ba565b9350610a348185602086016109cb565b610a3d816109fe565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7382610a48565b9050919050565b610a8381610a68565b82525050565b6000819050919050565b610a9c81610a89565b82525050565b6000608082019050610ab760008301876109a0565b8181036020830152610ac98186610a0f565b9050610ad86040830185610a7a565b610ae56060830184610a93565b95945050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b30826109fe565b810181811067ffffffffffffffff82111715610b4f57610b4e610af8565b5b80604052505050565b6000610b62610929565b9050610b6e8282610b27565b919050565b600067ffffffffffffffff821115610b8e57610b8d610af8565b5b610b97826109fe565b9050602081019050919050565b82818337600083830152505050565b6000610bc6610bc184610b73565b610b58565b905082815260208101848484011115610be257610be1610af3565b5b610bed848285610ba4565b509392505050565b600082601f830112610c0a57610c09610aee565b5b8135610c1a848260208601610bb3565b91505092915050565b610c2c81610a68565b8114610c3757600080fd5b50565b600081359050610c4981610c23565b92915050565b610c5881610a89565b8114610c6357600080fd5b50565b600081359050610c7581610c4f565b92915050565b600080600060608486031215610c9457610c93610933565b5b600084013567ffffffffffffffff811115610cb257610cb1610938565b5b610cbe86828701610bf5565b9350506020610ccf86828701610c3a565b9250506040610ce086828701610c66565b9150509250925092565b600060208284031215610d0057610cff610933565b5b6000610d0e84828501610c3a565b91505092915050565b6000602082019050610d2c60008301846109a0565b92915050565b600060208284031215610d4857610d47610933565b5b6000610d5684828501610c66565b91505092915050565b6000819050919050565b6000610d84610d7f610d7a84610a48565b610d5f565b610a48565b9050919050565b6000610d9682610d69565b9050919050565b6000610da882610d8b565b9050919050565b610db881610d9d565b82525050565b6000602082019050610dd36000830184610daf565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e2057607f821691505b60208210811415610e3457610e33610dd9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e7482610a89565b9150610e7f83610a89565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eb457610eb3610e3a565b5b828201905092915050565b6000819050919050565b610eda610ed582610a89565b610ebf565b82525050565b600081905092915050565b6000610ef6826109af565b610f008185610ee0565b9350610f108185602086016109cb565b80840191505092915050565b6000610f288285610ec9565b602082019150610f388284610eeb565b91508190509392505050565b6000602082019050610f596000830184610a7a565b92915050565b600081519050610f6e81610c4f565b92915050565b600060208284031215610f8a57610f89610933565b5b6000610f9884828501610f5f565b91505092915050565b7f496e73756666696369656e7420546f6b656e0000000000000000000000000000600082015250565b6000610fd76012836109ba565b9150610fe282610fa1565b602082019050919050565b6000602082019050818103600083015261100681610fca565b9050919050565b60006040820190506110226000830185610a7a565b61102f6020830184610a93565b9392505050565b60008115159050919050565b61104b81611036565b811461105657600080fd5b50565b60008151905061106881611042565b92915050565b60006020828403121561108457611083610933565b5b600061109284828501611059565b9150509291505056fea26469706673582212208856741df089f9d178e00fcceff83aa98a6612a08fb51f4037b10b347c0452ce64736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80637cf2beab1161005b5780637cf2beab14610104578063a0a934ff14610120578063c0299c1714610150578063fc0c546a146101805761007d565b80630f4b16c71461008257806312514f83146100b557806347505917146100e8575b600080fd5b61009c60048036038101906100979190610973565b61019e565b6040516100ac9493929190610aa2565b60405180910390f35b6100cf60048036038101906100ca9190610973565b610276565b6040516100df9493929190610aa2565b60405180910390f35b61010260048036038101906100fd9190610c7b565b6103bf565b005b61011e60048036038101906101199190610973565b6104cd565b005b61013a60048036038101906101359190610cea565b610826565b6040516101479190610d17565b60405180910390f35b61016a60048036038101906101659190610d32565b61083e565b6040516101779190610d17565b60405180910390f35b610188610862565b6040516101959190610dbe565b60405180910390f35b60026020528060005260406000206000915090508060000154908060010180546101c790610e08565b80601f01602080910402602001604051908101604052809291908181526020018280546101f390610e08565b80156102405780601f1061021557610100808354040283529160200191610240565b820191906000526020600020905b81548152906001019060200180831161022357829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154905084565b60006060600080600060026000878152602001908152602001600020604051806080016040529081600082015481526020016001820180546102b790610e08565b80601f01602080910402602001604051908101604052809291908181526020018280546102e390610e08565b80156103305780601f1061030557610100808354040283529160200191610330565b820191906000526020600020905b81548152906001019060200180831161031357829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481525050905080600001518160200151826040015183606001519450945094509450509193509193565b600180546103cd9190610e69565b6001819055506000600154846040516020016103ea929190610f1c565b60405160208183030381529060405280519060200120905060405180608001604052808281526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381525060026000838152602001908152602001600020600082015181600001556020820151816001019080519060200190610472929190610886565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015590505050505050565b6000600260008381526020019081526020016000206040518060800160405290816000820154815260200160018201805461050790610e08565b80601f016020809104026020016040519081016040528092919081815260200182805461053390610e08565b80156105805780601f1061055557610100808354040283529160200191610580565b820191906000526020600020905b81548152906001019060200180831161056357829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050806060015160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106499190610f44565b60206040518083038186803b15801561066157600080fd5b505afa158015610675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106999190610f74565b10156106da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d190610fed565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826040015183606001516040518363ffffffff1660e01b815260040161073d92919061100d565b602060405180830381600087803b15801561075757600080fd5b505af115801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f919061106e565b5081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167ffe6400498b4af70e0ceab7d6f4d52b731d43bfac6a0a14a50e868cb782c79f828360405161081a9190610d17565b60405180910390a25050565b60046020528060005260406000206000915090505481565b6003818154811061084e57600080fd5b906000526020600020016000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b82805461089290610e08565b90600052602060002090601f0160209004810192826108b457600085556108fb565b82601f106108cd57805160ff19168380011785556108fb565b828001600101855582156108fb579182015b828111156108fa5782518255916020019190600101906108df565b5b509050610908919061090c565b5090565b5b8082111561092557600081600090555060010161090d565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6109508161093d565b811461095b57600080fd5b50565b60008135905061096d81610947565b92915050565b60006020828403121561098957610988610933565b5b60006109978482850161095e565b91505092915050565b6109a98161093d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109e95780820151818401526020810190506109ce565b838111156109f8576000848401525b50505050565b6000601f19601f8301169050919050565b6000610a1a826109af565b610a2481856109ba565b9350610a348185602086016109cb565b610a3d816109fe565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7382610a48565b9050919050565b610a8381610a68565b82525050565b6000819050919050565b610a9c81610a89565b82525050565b6000608082019050610ab760008301876109a0565b8181036020830152610ac98186610a0f565b9050610ad86040830185610a7a565b610ae56060830184610a93565b95945050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b30826109fe565b810181811067ffffffffffffffff82111715610b4f57610b4e610af8565b5b80604052505050565b6000610b62610929565b9050610b6e8282610b27565b919050565b600067ffffffffffffffff821115610b8e57610b8d610af8565b5b610b97826109fe565b9050602081019050919050565b82818337600083830152505050565b6000610bc6610bc184610b73565b610b58565b905082815260208101848484011115610be257610be1610af3565b5b610bed848285610ba4565b509392505050565b600082601f830112610c0a57610c09610aee565b5b8135610c1a848260208601610bb3565b91505092915050565b610c2c81610a68565b8114610c3757600080fd5b50565b600081359050610c4981610c23565b92915050565b610c5881610a89565b8114610c6357600080fd5b50565b600081359050610c7581610c4f565b92915050565b600080600060608486031215610c9457610c93610933565b5b600084013567ffffffffffffffff811115610cb257610cb1610938565b5b610cbe86828701610bf5565b9350506020610ccf86828701610c3a565b9250506040610ce086828701610c66565b9150509250925092565b600060208284031215610d0057610cff610933565b5b6000610d0e84828501610c3a565b91505092915050565b6000602082019050610d2c60008301846109a0565b92915050565b600060208284031215610d4857610d47610933565b5b6000610d5684828501610c66565b91505092915050565b6000819050919050565b6000610d84610d7f610d7a84610a48565b610d5f565b610a48565b9050919050565b6000610d9682610d69565b9050919050565b6000610da882610d8b565b9050919050565b610db881610d9d565b82525050565b6000602082019050610dd36000830184610daf565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e2057607f821691505b60208210811415610e3457610e33610dd9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e7482610a89565b9150610e7f83610a89565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eb457610eb3610e3a565b5b828201905092915050565b6000819050919050565b610eda610ed582610a89565b610ebf565b82525050565b600081905092915050565b6000610ef6826109af565b610f008185610ee0565b9350610f108185602086016109cb565b80840191505092915050565b6000610f288285610ec9565b602082019150610f388284610eeb565b91508190509392505050565b6000602082019050610f596000830184610a7a565b92915050565b600081519050610f6e81610c4f565b92915050565b600060208284031215610f8a57610f89610933565b5b6000610f9884828501610f5f565b91505092915050565b7f496e73756666696369656e7420546f6b656e0000000000000000000000000000600082015250565b6000610fd76012836109ba565b9150610fe282610fa1565b602082019050919050565b6000602082019050818103600083015261100681610fca565b9050919050565b60006040820190506110226000830185610a7a565b61102f6020830184610a93565b9392505050565b60008115159050919050565b61104b81611036565b811461105657600080fd5b50565b60008151905061106881611042565b92915050565b60006020828403121561108457611083610933565b5b600061109284828501611059565b9150509291505056fea26469706673582212208856741df089f9d178e00fcceff83aa98a6612a08fb51f4037b10b347c0452ce64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2539,
        "contract": "contracts/FoodieBooking.sol:FoodieBooking",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ERC20)698"
      },
      {
        "astId": 2550,
        "contract": "contracts/FoodieBooking.sol:FoodieBooking",
        "label": "chefCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2555,
        "contract": "contracts/FoodieBooking.sol:FoodieBooking",
        "label": "chefs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Chef)2548_storage)"
      },
      {
        "astId": 2558,
        "contract": "contracts/FoodieBooking.sol:FoodieBooking",
        "label": "chefsList",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2568,
        "contract": "contracts/FoodieBooking.sol:FoodieBooking",
        "label": "bookings",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)698": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(Chef)2548_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct FoodieBooking.Chef)",
        "numberOfBytes": "32",
        "value": "t_struct(Chef)2548_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Chef)2548_storage": {
        "encoding": "inplace",
        "label": "struct FoodieBooking.Chef",
        "members": [
          {
            "astId": 2541,
            "contract": "contracts/FoodieBooking.sol:FoodieBooking",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2543,
            "contract": "contracts/FoodieBooking.sol:FoodieBooking",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2545,
            "contract": "contracts/FoodieBooking.sol:FoodieBooking",
            "label": "wallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2547,
            "contract": "contracts/FoodieBooking.sol:FoodieBooking",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}